# Controller application module
import os
import time
import pyinotify
import logging
from subprocess import call

from dot.base import app_manager
from dot import cfg
from dot.controller import nf_event
from dot.lib import hub

LOG = logging.getLogger('dot.controller.controller')
CONF = cfg.CONF
CONF.register_cli_opts([
    cfg.StrOpt('work-dir', required = True, default=None, help='working directory'),
    cfg.StrOpt('csv-dir', required = True, default=None, help='temporary directory to save csv files converted from nfcapd files'),
    ])

class Controller(app_manager.DotApp):
    # Define events generated by this App.
    _EVENTS = {nf_event.NewFileEvent}

    def __init__(self, *args, **kwargs):
        super(Controller, self).__init__(*args, **kwargs)

    def start(self):
        super(Controller, self).start()
        return hub.spawn(self.monitor_working_dir, CONF.work_dir)

    def monitor_working_dir(self, working_dir):
        # Watch manager
        #wm = pyinotify.WatchManager()
        #wm.add_watch(working_dir, pyinotify.IN_CLOSE_WRITE, rec=True)
        
        # Notifier
        #notifier = pyinotify.Notifier(wm, self.find_new_file)
        #notifier.loop()

        # For now, skip the front-end interface
        # Directly feed the pcap-files in order
        nf_directory = "/home/chang/DDoS/research_data/lbl-mr2"
        nfList = []
        for dirname, subdirList, fileList in os.walk(nf_directory, topdown=False):
            nfList += [os.path.join(dirname,k) for k in fileList if os.path.isfile(os.path.join(dirname, k))]
        nfList = sorted(nfList)
        self.logger.debug("first nf_file: %s", nfList[0])
        for filename in nfList:
            #self.logger.debug("CLOSE_WRITE file %s at time %f", filename, time.time())
            self.nf2csv(filename, CONF.csv_dir)
            time.sleep(0.1)

    def find_new_file(self, event):
        self.logger.debug("CLOSE_WRITE event: %s at time %f", event.pathname, time.time())
        nfname = event.pathname
        #hub.spawn(self.nf2csv, nfname, CONF.csv_dir)
        self.nf2csv(nfname, CONF.csv_dir)

    def nf2csv(self, nfname, csvdir):
        cmd = ['nfdump', '-o', 'csv', '-r', 0]
        cmd[4] = nfname

        basename = os.path.basename(nfname)
        abs_csv_name = os.path.join(csvdir, basename+'.csv')
        try:
            with open(abs_csv_name, 'wb') as ff:
                call(cmd, stdout=ff)
        except IOError as ioe:
            self.logger.error("IOError: [%s] %s", ioe.errno, ioe.strerror)
        #self.logger.debug("Convert nfcapd file %s to csv at time %f", nfname, time.time())

        msg = nf_event.NewFileEvent(abs_csv_name)
        self.send_event_to_observers(msg)

    def hello(self):
        self.logger.info('hello')
